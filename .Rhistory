install.packages("knitr")
library(XML) # needed to convert HTML table to list object
vtFballData <- function(start,stop,season){
dsf <- c()
# read the source code
for (i in start:stop){
url <- paste("http://www.hokiesports.com/football/stats/showstats.html?",i,sep="")
web_page <- readLines(url)
# find where VT drive summary begins
dsum <- web_page[(grep("Virginia Tech Drive Summary", web_page) - 2):(grep("Virginia Tech Drive Summary", web_page) + 18)]
dsum2 <- readHTMLTable(dsum)
rn <- dim(dsum2[[1]])[1]
cn <- dim(dsum2[[1]])[2]
ds <- dsum2[[1]][4:rn,c(1,(cn-2):cn)]
ds[,3] <- as.character(ds[,3]) # convert from factor to character
py <- do.call(rbind,strsplit(sub("-"," ",ds[,3])," "))
ds2 <- cbind(ds,py)
ds2[,5] <- as.character(ds2[,5]) # convert from factor to character
ds2[,6] <- as.character(ds2[,6]) # convert from factor to character
ds2[,5] <- as.numeric(ds2[,5]) # convert from character to numeric
ds2[,6] <- as.numeric(ds2[,6]) # convert from character to numeric
ds2[,3] <- NULL # drop original pl-yds column
names(ds2) <-c("quarter","result","top","plays","yards")
# drop unused factor levels carried over from readlines
ds2$quarter <- ds2$quarter[, drop=TRUE]
ds2$result <- ds2$result[, drop=TRUE]
# convert TOP from factor to character
ds2[,3] <- as.character(ds2[,3])
# convert TOP from M:S to just seconds
ds2$top <- sapply(strsplit(ds2$top,":"),
function(x) {
x <- as.numeric(x)
x[1]*60 + x[2]})
# need to add opponent
opp <- web_page[grep("Drive Summary", web_page)]
opp <- opp[grep("Virginia Tech", opp, invert=TRUE)] # get the one that is not VT
opp <- strsplit(opp,">")[[1]][2]
opp <- sub(" Drive Summary</td","",opp)
ds2 <- cbind(season,opp,ds2)
dsf <- rbind(dsf,ds2)
}
return(dsf)
}
dsData2012 <- vtFballData(14871,14882,2012)
install.packages("XML")
vtFballData <- function(start,stop,season){
dsf <- c()
# read the source code
for (i in start:stop){
url <- paste("http://www.hokiesports.com/football/stats/showstats.html?",i,sep="")
web_page <- readLines(url)
# find where VT drive summary begins
dsum <- web_page[(grep("Virginia Tech Drive Summary", web_page) - 2):(grep("Virginia Tech Drive Summary", web_page) + 18)]
dsum2 <- readHTMLTable(dsum)
rn <- dim(dsum2[[1]])[1]
cn <- dim(dsum2[[1]])[2]
ds <- dsum2[[1]][4:rn,c(1,(cn-2):cn)]
ds[,3] <- as.character(ds[,3]) # convert from factor to character
py <- do.call(rbind,strsplit(sub("-"," ",ds[,3])," "))
ds2 <- cbind(ds,py)
ds2[,5] <- as.character(ds2[,5]) # convert from factor to character
ds2[,6] <- as.character(ds2[,6]) # convert from factor to character
ds2[,5] <- as.numeric(ds2[,5]) # convert from character to numeric
ds2[,6] <- as.numeric(ds2[,6]) # convert from character to numeric
ds2[,3] <- NULL # drop original pl-yds column
names(ds2) <-c("quarter","result","top","plays","yards")
# drop unused factor levels carried over from readlines
ds2$quarter <- ds2$quarter[, drop=TRUE]
ds2$result <- ds2$result[, drop=TRUE]
# convert TOP from factor to character
ds2[,3] <- as.character(ds2[,3])
# convert TOP from M:S to just seconds
ds2$top <- sapply(strsplit(ds2$top,":"),
function(x) {
x <- as.numeric(x)
x[1]*60 + x[2]})
# need to add opponent
opp <- web_page[grep("Drive Summary", web_page)]
opp <- opp[grep("Virginia Tech", opp, invert=TRUE)] # get the one that is not VT
opp <- strsplit(opp,">")[[1]][2]
opp <- sub(" Drive Summary</td","",opp)
ds2 <- cbind(season,opp,ds2)
dsf <- rbind(dsf,ds2)
}
return(dsf)
}
dsData2012 <- vtFballData(14871,14882,2012)
remove.packages("arm")
remove.packages("foreign")
remove.packages("gcookbook")
library(XML) # needed to convert HTML table to list object
vtFballData <- function(start,stop,season){
dsf <- c()
# read the source code
for (i in start:stop){
url <- paste("http://www.hokiesports.com/football/stats/showstats.html?",i,sep="")
web_page <- readLines(url)
# find where VT drive summary begins
dsum <- web_page[(grep("Virginia Tech Drive Summary", web_page) - 2):(grep("Virginia Tech Drive Summary", web_page) + 18)]
dsum2 <- readHTMLTable(dsum)
rn <- dim(dsum2[[1]])[1]
cn <- dim(dsum2[[1]])[2]
ds <- dsum2[[1]][4:rn,c(1,(cn-2):cn)]
ds[,3] <- as.character(ds[,3]) # convert from factor to character
py <- do.call(rbind,strsplit(sub("-"," ",ds[,3])," "))
ds2 <- cbind(ds,py)
ds2[,5] <- as.character(ds2[,5]) # convert from factor to character
ds2[,6] <- as.character(ds2[,6]) # convert from factor to character
ds2[,5] <- as.numeric(ds2[,5]) # convert from character to numeric
ds2[,6] <- as.numeric(ds2[,6]) # convert from character to numeric
ds2[,3] <- NULL # drop original pl-yds column
names(ds2) <-c("quarter","result","top","plays","yards")
# drop unused factor levels carried over from readlines
ds2$quarter <- ds2$quarter[, drop=TRUE]
ds2$result <- ds2$result[, drop=TRUE]
# convert TOP from factor to character
ds2[,3] <- as.character(ds2[,3])
# convert TOP from M:S to just seconds
ds2$top <- sapply(strsplit(ds2$top,":"),
function(x) {
x <- as.numeric(x)
x[1]*60 + x[2]})
# need to add opponent
opp <- web_page[grep("Drive Summary", web_page)]
opp <- opp[grep("Virginia Tech", opp, invert=TRUE)] # get the one that is not VT
opp <- strsplit(opp,">")[[1]][2]
opp <- sub(" Drive Summary</td","",opp)
ds2 <- cbind(season,opp,ds2)
dsf <- rbind(dsf,ds2)
}
return(dsf)
}
dsData2012 <- vtFballData(14871,14882,2012)
View(dsData2012)
url <- paste("http://www.hokiesports.com/football/stats/showstats.html?14871")
